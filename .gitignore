const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Configura√ß√£o do PostgreSQL
const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT || 5432,
});

async function setupDatabase() {
    console.log('üóÑÔ∏è Configurando banco de dados...');
    
    try {
        // Testa conex√£o
        console.log('üì° Testando conex√£o com PostgreSQL...');
        const testResult = await pool.query('SELECT NOW()');
        console.log(`‚úÖ Conectado ao PostgreSQL: ${testResult.rows[0].now}`);
        
        // L√™ e executa o schema SQL
        console.log('üìã Executando schema SQL...');
        const schemaPath = path.join(__dirname, '../database/schema.sql');
        const schemaSql = fs.readFileSync(schemaPath, 'utf8');
        
        // Executa schema
        await pool.query(schemaSql);
        console.log('‚úÖ Schema criado com sucesso!');
        
        // Insere dados padr√£o
        console.log('üîß Inserindo dados padr√£o...');
        
        // Inst√¢ncias WhatsApp (baseado no seu c√≥digo original)
        const instancesQuery = `
            INSERT INTO whatsapp_instances (instance_name, instance_id, status, max_conversations) VALUES

            ('G09', 'E667206D3C72-4F8B-AD10-F933F273A39B', 'online', 50)
            ON CONFLICT (instance_name) DO NOTHING;
        `;
        
        await pool.query(instancesQuery);
        console.log('‚úÖ Inst√¢ncias WhatsApp inseridas!');
        
        // Configura√ß√£o de fluxo padr√£o
        const flowQuery = `
            INSERT INTO flow_configs (flow_name, n8n_webhook_url, instance_pool, is_active) VALUES
            ('fluxo_principal', $1, $2, true)
            ON CONFLICT (flow_name) DO UPDATE SET
                n8n_webhook_url = EXCLUDED.n8n_webhook_url,
                instance_pool = EXCLUDED.instance_pool;
        `;
        
        const instancePool = JSON.stringify(['G09']);
        
        await pool.query(flowQuery, [
            process.env.N8N_WEBHOOK_URL || 'https://n8n.flowzap.fun/webhook/checkpoint',
            instancePool
        ]);
        
        console.log('‚úÖ Configura√ß√£o de fluxo criada!');
        
        // Verifica dados inseridos
        const instanceCount = await pool.query('SELECT COUNT(*) FROM whatsapp_instances');
        const flowCount = await pool.query('SELECT COUNT(*) FROM flow_configs');
        
        console.log('\nüìä Resumo da instala√ß√£o:');
        console.log(`   ‚Ä¢ ${instanceCount.rows[0].count} inst√¢ncias WhatsApp configuradas`);
        console.log(`   ‚Ä¢ ${flowCount.rows[0].count} fluxo(s) configurado(s)`);
        console.log(`   ‚Ä¢ Timeout de conversas: 24 horas`);
        console.log(`   ‚Ä¢ Sistema pronto para uso!\n`);
        
        console.log('üéâ Banco de dados configurado com sucesso!');
        console.log('üí° Para iniciar o sistema, execute: npm start');
        
    } catch (error) {
        console.error('‚ùå Erro ao configurar banco de dados:');
        console.error(error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('\nüí° Dicas para resolver:');
            console.log('   1. Verifique se o PostgreSQL est√° rodando');
            console.log('   2. Confirme as credenciais no arquivo .env');
            console.log('   3. Certifique-se que o banco existe');
        }
        
        process.exit(1);
    } finally {
        await pool.end();
    }
}

// Verifica se foi chamado com --reset
const resetMode = process.argv.includes('--reset');
if (resetMode) {
    console.log('‚ö†Ô∏è MODO RESET: Todas as tabelas ser√£o recriadas!');
}

setupDatabase();
